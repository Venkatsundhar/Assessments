# -*- coding: utf-8 -*-
"""LVADSUSR195_Venkatsundhar-SP_LAB-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15O80K0YDk2kkcBxKjBQ4DYJ4kl4ZsAzh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from matplotlib.ticker import MultipleLocator
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,classification_report,confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
import warnings
warnings.filterwarnings("ignore")
from matplotlib.ticker import MultipleLocator

df = pd.read_csv('/content/sample_data/bengaluru_house_prices.csv')
df.head()

df.info()

df.shape

df.describe()

df.isnull().sum()

df.columns

df.head()

for c in df[['location','size']]:
  df[c].fillna(df[c].mode(),inplace=True)

for c in df[['bath','balcony']]:
  plt.figure(figsize=(9,5))
  sns.histplot(df[c])

for c in df[['bath','balcony']]:
  df[c].fillna(df[c].mean(),inplace=True)

df.isnull().sum()

df.drop('society',axis=1,inplace=True)

df.head()

df.info()

for i in range(0,13319):
  df['size'][i]=df['size'][i][0]
df['size'] = pd.to_numeric(df['size'])

df['size'] = pd.to_numeric(df['size'])

for c in df.select_dtypes(include=['int64','float64']):
  plt.figure(figsize=(9,5))
  sns.boxplot(df[c])

for c in df.select_dtypes(include=['int64','float64']):
  q1 = df[c].quantile(0.25)
  q3 = df[c].quantile(0.75)
  iqr = q3-q1
  upr = q3+1.5*iqr
  lwr = q1-1.5*iqr
  df.loc[df[c]>upr,c] = upr
  df.loc[df[c]<lwr,c] = lwr

for c in df.select_dtypes(include=['int64','float64']):
  plt.figure(figsize=(9,5))
  sns.boxplot(df[c])

df.head()

df.info()

df.columns

L = LabelEncoder()
for c in df[['area_type', 'availability', 'location','total_sqft','size']]:
  df[c] = L.fit_transform(df[c])

corr = df[['area_type', 'availability', 'location','size','total_sqft', 'bath',
       'balcony', 'price']].corr()
plt.figure(figsize=(12,7))
sns.heatmap(corr,annot=True,fmt='.2f',linewidths=0.5)

X = df[['area_type', 'availability', 'location','size','total_sqft', 'bath',
       'balcony',]]
y = df['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)

S = MinMaxScaler()
X_train = S.fit_transform(X_train)
X_test = S.transform(X_test)

LR = LinearRegression()
LR.fit(X_train,y_train)
predicted = LR.predict(X_test)

print('R2_Score:',r2_score(y_test,predicted))
print('Mean Absolute Error:',mean_absolute_error(y_test,predicted))
print('Mean Squared Error',mean_squared_error(y_test,predicted))
print('RMSE:',np.sqrt(mean_squared_error(y_test,predicted)))

#Linear best fit line
plt.scatter(y_test,predicted, c='red', label='Actual')
plt.scatter(y_test, y_test, c='blue', label='Predicted')
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='black', linestyle='-', label='bestfitline')
plt.legend()

