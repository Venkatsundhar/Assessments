# -*- coding: utf-8 -*-
"""LVADSUSR195_Venkatsundhar_LAB4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14z00pHRUghroAKW0gHIkOfTdFSyIgThL
"""

import numpy as np
import pandas as pd
import re
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier, GradientBoostingClassifier, IsolationForest
from sklearn.metrics import confusion_matrix, classification_report, f1_score, roc_curve, roc_auc_score, precision_recall_curve, auc, r2_score, mean_squared_error, accuracy_score, recall_score, silhouette_score, silhouette_samples,mean_absolute_error
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/sample_data/anomaly_train.csv')
df.head()

df.isnull().sum()

df.duplicated().sum()

df.columns

X = df[['Amount','Time']]

model = IsolationForest(n_estimators=100,contamination=0.1)
model.fit(X)

y_pred = model.predict(X)

df['anomaly_score'] = model.decision_function(X)
df['anomaly'] = y_pred

df.head()

anomalies = df.loc[df['anomaly'] == -1]

anomalies

anomalies.shape

plt.scatter(df['Amount'],df['Time'],label='normal')
plt.scatter(anomalies['social_connections'],anomalies['anomaly_score'],label='anomaly')
plt.xlabel('social connections')
plt.ylabel('anomaly_score')
plt.legend()
plt.show()

df['is_anomaly'] = df['anomaly'].map({-1:"yes",1:"no"})

df

